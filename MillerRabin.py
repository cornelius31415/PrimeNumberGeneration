"""                            MILLER RABIN TEST                                Let n be an odd positive integer and s the highest power of 2                dividing (n-1):                                                        n-1 = d * 2**s                with d being odd.                                If n is a prime number and a such that gcd(a,n) = 1 then                at least one of the following conditions must hold:                                        1. a**d = 1 mod n         -> n|a**d - 1                                        2. there exists a r in {0,1,2,...,s-1} such that                       a**(d*2**r) = -1 mod n -> n|(a**(d*2**r) + 1)"""from math import gcdfrom random import randintdef highestPowerOf2(number):    #     # repeatedly divide (number - 1) by 2 until result is odd    # returns s as the highest power and the first odd number d    # that pops up in the repeated division by 2        d = number - 1    s = 0        while d % 2 == 0:        d = d//2        s += 1            return s,dprint(highestPowerOf2(561))def randomBase(number):    base = 0    while gcd(base,number)!=1 or base ==0:        base = randint(2,number-2)    return baseprint(randomBase(15))def modular_exponent(a,b,n):    result = 1    for i in range(0,b):        result *= a        result %= n        return resultdef primeTest(number):    a = randomBase(number)    s,d = highestPowerOf2(number)        x = modular_exponent(a,d,number)        if x == 1:        return True         for r in range(0,s):        exponent = d*2**r         x = modular_exponent(a,exponent,number)        if x == -1 or x == number - 1:            return True            return Falseprint(primeTest(37))